/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AFSA2_Main.java
 *
 * Created on Jul 18, 2011, 1:07:10 PM
 */

package my.AFSA2;

/**
 *
 * @author Owner
 */
//import org.jfree.ui.RefineryUtilities;
import java.io.*;
import java.io.IOException;
import javax.swing.*;
import java.util.Scanner;
import java.util.ArrayList;
import java.awt.*;

public class AFSA2_Main extends javax.swing.JFrame {
static String holder;
static String out;
static ArrayList nameOfFiles = new ArrayList();
static double Rmean1,Rmean2,Rmean3,Rstd1,Rstd2,Rstd3;
public ImageIcon  ant= new ImageIcon("icon.gif");

    /** Creates new form AFSA2_Main */
    public AFSA2_Main() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        AFS_Raw_File = new javax.swing.JTextField();
        AFSA_Output = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        OutputPane = new javax.swing.JTextArea();
        AFS_Analysis = new javax.swing.JButton();
        sort_AFS_Files = new javax.swing.JButton();
        Mean_SD = new javax.swing.JCheckBox();

        jButton3.setText("jButton3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ant Foraging Simulator Analyzer");
        setIconImage(new ImageIcon("image/icon.gif").getImage());

        jPanel1.setBackground(new java.awt.Color(0, 102, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel1.setText("AFS Raw File");

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel2.setText("AFSA Output File");

        AFS_Raw_File.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        AFS_Raw_File.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AFS_Raw_FileActionPerformed(evt);
            }
        });

        AFSA_Output.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        jButton1.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jButton1.setText("Browse...");
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jButton2.setText("Browse...");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        OutputPane.setBackground(new java.awt.Color(204, 204, 255));
        OutputPane.setColumns(20);
        OutputPane.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        OutputPane.setRows(5);
        OutputPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));
        jScrollPane1.setViewportView(OutputPane);

        AFS_Analysis.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        AFS_Analysis.setText("Run AFS Analysis");
        AFS_Analysis.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        AFS_Analysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AFS_AnalysisActionPerformed(evt);
            }
        });

        sort_AFS_Files.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        sort_AFS_Files.setText("Sort AFS Raw File");
        sort_AFS_Files.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sort_AFS_Files.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sort_AFS_FilesActionPerformed(evt);
            }
        });

        Mean_SD.setBackground(new java.awt.Color(0, 102, 204));
        Mean_SD.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Mean_SD.setText("Calculate Mean and Standard Deviations");
        Mean_SD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Mean_SDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(22, 22, 22)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(AFSA_Output)
                                    .addComponent(AFS_Raw_File, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(sort_AFS_Files, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(AFS_Analysis, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(Mean_SD)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(AFS_Raw_File, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(AFSA_Output, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(27, 27, 27)
                .addComponent(Mean_SD)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sort_AFS_Files, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AFS_Analysis, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AFS_Raw_FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AFS_Raw_FileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AFS_Raw_FileActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            AFS_Raw_File.setText(fc.getSelectedFile().toString());
           holder = fc.getSelectedFile().toString();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       vc = new JFileChooser();
        int returnVal = vc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            AFSA_Output.setText(vc.getSelectedFile().toString());
            out=vc.getSelectedFile().toString();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void AFS_AnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AFS_AnalysisActionPerformed
        File Infile1 = new File("Filenames.txt");
        String out1= out;
        int length=0;
        int c=0;
        String item;
        try{
            Scanner Input1 = new Scanner(Infile1);

            // System.out.println("Starting with inpu1");
            while (Input1.hasNext()) {
                item = Input1.next();
                //System.out.println(item);
                nameOfFiles.add(item);
                //("Input1: step "+ c);
                c++;
                length++;

            }
            // System.out.println("Done with input1");
            Input1.close();
        } catch(FileNotFoundException ex) {
            OutputPane.append("Filenames.txt not found\n");
            OutputPane.append("This file contains the names of files containing AFSD data\n");
            OutputPane.append("It is not to be moved from the main program folder\n");

        }
        //Declare Seed objects
        Seed sid1 = new Seed();
        Seed sid2 = new Seed();
        Seed sid3 = new Seed();
        Seed sid4 = new Seed();

        double []PSR1=new double[length];
        double []PSR2=new double[length];
        double []PSR3=new double[length];
        double []PSR4=new double[length];

        double RSP1,RSP2,RSP3,RSP4;
        

        double []RR1=new double[length];
        double []RR2=new double[length];
        double []RR3=new double[length];

        double []LogRR1 = new double[length];
        double []LogRR2 = new double[length];
        double []LogRR3 = new double[length];

         

        int l1=0,l2=0,l3=0,l4=0;
        int e=0,y=0,b=0,v=0;
        int e1=0,e2=0,e3=0,e5=0;

        double RRMean1, RRMean2,RRMean3;
        double RRstd1,RRstd2,RRstd3;

        double LogRRMean1,LogRRMean2,LogRRMean3;
        double LogRRstd1,LogRRstd2,LogRRstd3;

        File Infile2 ;
        Scanner Input2;
        String filenames;
        String filevalue;

        for(int i=0; i<length; i++) {
            filenames = nameOfFiles.get(i).toString();
            OutputPane.append("Working with file " + filenames+"\n");
            Infile2 = new File(filenames + ".txt");
            try{
                Input2 = new Scanner(Infile2);
                while (Input2.hasNext()) {
                    filevalue = Input2.next();
                    //System.out.println("value: " + filevalue);

                    if(filevalue.substring(0,1).equals("1")) {
                        sid1.InsertData(filevalue);
                       e1++;
                    } else
                        if(filevalue.substring(0,1).equals("2")) {
                            sid2.InsertData(filevalue);
                            e2++;
                        } else
                            if(filevalue.substring(0,1).equals("3")) {
                                sid3.InsertData(filevalue);
                               e3++;
                            } else
                                if(filevalue.substring(0,1).equals("5")) {
                                    sid4.InsertData(filevalue);
                                      e5++;
                                } else {
                        OutputPane.append("Corrupt data detected, please check AFS source file currently being processed\n.");
                        break;
                                }
                }//closing while loop bracket
              Input2.close();
            }//closing try bracket
            catch(FileNotFoundException ex) {
                OutputPane.append("File not found\n");

            }

            //System.out.println(sid4.Show());
            l1 = sid1.Length();
            l2 = sid2.Length();
            l3 = sid3.Length();
            l4 = sid4.Length();

            System.out.println("L1 is : "+l1);
            System.out.println("L2 is : "+l2);
            System.out.println("L3 is : "+l3);
            System.out.println("L4 is : "+l4);
            System.out.println("******* Run"+i);
             int [] red = new int[l1];
            int [] green = new int [l2];
            int [] purple = new int [l3];
            int [] blue = new int [l4];

            sid1.Reset();
            sid2.Reset();
            sid3.Reset();
            sid4.Reset();

           
            OutputPane.append("Red,Green,Purple and Blue seed arrays have been initialized\n");
            for (int m=0; m<l1; m++)
            {
                red[m] =Convert(sid1);
            }
            System.out.println("Red seed array initialized");
            int t1first=red[0];
            int t1=red.length;
            int t1last=red[(t1)-1];
            RSP1 = ((double)t1)/((double)t1last-(double)t1first);
            PSR1[e]=RSP1;
            RSP1=0.0;
            System.out.printf("Red PSR run %d calculated and the red array is %d",e,t1);
            e++;

            for (int j=0; j<l2; j++)
            {
                green[j] =Convert(sid2);
            }
            System.out.println("Green seed array initialized");
            int t2first=green[0];
            int t2=green.length;
            int t2last=green[(t2)-1];
            RSP2 = ((double)t2)/((double)t2last-(double)t2first);
            PSR2[y]=RSP2;
            System.out.printf("Green PSR run %d calculated and length of green array is %d",y,t2);
            y++;

            for (int q=0; q<l3; q++)
            {
                purple[q] =Convert(sid3);
            }
            System.out.println("Purple seed array initialized");
            int t3first=purple[0];
            int t3=purple.length;
            int t3last=purple[(t3)-1];
            RSP3 = ((double)t3)/((double)t3last-(double)t3first);
            PSR3[b]=RSP3;
            System.out.printf("Purple PSR run %d calculated and length of Purple array is %d",b,t3);
            b++;

            for (int l=0; l<l4; l++)
            {
                blue[l] =Convert(sid4);
            }
            System.out.println("Blue seed array initialized");
            int t4first=blue[0];
            int t4=blue.length;
            int t4last=blue[(t4)-1];
            RSP4 = ((double)t4)/((double)t4last-(double)t4first);
            PSR4[v]=RSP4;
            System.out.printf("Blue PSR run %d calculated and length of Blue array is %d",v,t4);
            v++;
         
            System.out.println("Emptying red seed holder");
            sid1.EmptySeedObject(t1);
            System.out.println("Emptying green seed holder");
            sid2.EmptySeedObject(t2);
            System.out.println("Emptying purple seed holder");
            sid3.EmptySeedObject(t3);
            System.out.println("Emptying blue seed holder");
            sid4.EmptySeedObject(t4);
            System.out.println("Seed objects emptied");
        }
        //Calculating Recruitment ratio values
          for(int u=0; u<length;u++)
          {
              RR1[u]=PSR1[u]/PSR4[u];
              RR2[u]=PSR2[u]/PSR4[u];
              RR3[u]=PSR3[u]/PSR4[u];
          }

        //Calculating logged recruitment ratio values
        for(int n=0;n<length;n++)
        {
        LogRR1[n]=Math.log(RR1[n])/Math.log(2.0);
        LogRR2[n]=Math.log(RR2[n])/Math.log(2.0);
        LogRR3[n]=Math.log(RR3[n])/Math.log(2.0);
        }
        OutputPane.append("All files have been processed\n");
        RRMean1= MeanFunc(RR1,length);
        RRMean2= MeanFunc(RR2,length);
        RRMean3= MeanFunc(RR3,length);

        RRstd1 = StandardDevFunc(RR1,length);
        RRstd2 = StandardDevFunc(RR2,length);
        RRstd3 = StandardDevFunc(RR3,length);

        LogRRMean1=MeanFunc(LogRR1,length);
        LogRRMean2=MeanFunc(LogRR2,length);
        LogRRMean3=MeanFunc(LogRR3,length);

        LogRRstd1= StandardDevFunc(LogRR1,length);
        LogRRstd2= StandardDevFunc(LogRR2,length);
        LogRRstd3= StandardDevFunc(LogRR3,length);

        Rmean1 = LogRRMean1;
        Rmean2 = LogRRMean2;
        Rmean3 = LogRRMean3;

        Rstd1=LogRRstd1;
        Rstd2=LogRRstd2;
        Rstd3=LogRRstd3;
        try{
            PrintWriter Outfile = new PrintWriter(out1);
            OutputPane.append("Writing data to outputfile " +out1+"\n");
            for(int h=0; h<length; h++)
                Outfile.printf("%11.10f    %11.10f    %11.10f    %11.10f    %11.10f    %11.10f    %11.10f    %11.10f    %11.10f    %11.10f \n",PSR1[h],PSR2[h],PSR3[h],PSR4[h],RR1[h],RR2[h],RR3[h],LogRR1[h],LogRR2[h],LogRR3[h]);
            Outfile.println("\n");
            Outfile.println("\n");
            Outfile.println("\n");
            if(Mean_SD.isSelected()) {
                Outfile.println("The Mean  and Standard Deviations of the Recruitment Ratios before Normalization:\n");
                Outfile.printf("The Mean and Standard Deviation for Recruitment Ratio 1(RR1): %11.10f & %11.10f respectively\n",RRMean1,RRstd1);
                Outfile.printf("The Mean and Standard Deviation for Recruitment Ratio 2(RR2): %11.10f & %11.10f respectively\n",RRMean2,RRstd2);
                Outfile.printf("The Mean and Standard Deviation for Recruitment Ratio 3(RR3): %11.10f & %11.10f respectively\n",RRMean3,RRstd3);
                Outfile.println("\n");
                Outfile.println("\n");
                Outfile.println("The Mean  and Standard Deviations of the Recruitment Ratios after Normalization:\n");
                Outfile.printf("Normalized Mean and Standard Deviation for Recruitment Ratio 1(RR1): %11.10f & %11.10f respectively\n",LogRRMean1,LogRRstd1);
                Outfile.printf("Normalized Mean and Standard Deviation for Recruitment Ratio 2(RR2): %11.10f & %11.10f respectively\n",LogRRMean2,LogRRstd2);
                Outfile.printf("Normalized Mean and Standard Deviation for Recruitment Ratio 3(RR3): %11.10f & %11.10f respectively\n",LogRRMean3,LogRRstd3);
            }
            Outfile.close();
            OutputPane.append("All results have been written to output file.\n");
        } catch(FileNotFoundException ex) {
            OutputPane.append("Output file not found.\n");

        }
}//GEN-LAST:event_AFS_AnalysisActionPerformed

    private void sort_AFS_FilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sort_AFS_FilesActionPerformed
        String holder1=holder;
        System.out.println(holder1);
        FileSorter(holder1);
        OutputPane.append("All AFS files have been succesfully sorted.\n");
        OutputPane.append("Ready to begin Analysis of AFS files\n.");
}//GEN-LAST:event_sort_AFS_FilesActionPerformed

    private void Mean_SDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Mean_SDActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_Mean_SDActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) throws IOException {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AFSA2_Main().setVisible(true);
            }
        });
    }
    private JFileChooser fc;
    private JFileChooser vc;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AFSA_Output;
    private javax.swing.JButton AFS_Analysis;
    private javax.swing.JTextField AFS_Raw_File;
    private javax.swing.JCheckBox Mean_SD;
    private javax.swing.JTextArea OutputPane;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton sort_AFS_Files;
    // End of variables declaration//GEN-END:variables
 //FileSorter starts here
    public  static void FileSorter(String Filepath)
    {
ArrayList fileNames = new ArrayList();
        String  Path = Filepath;
        String Inputvalue;//value read from the AFSA raw file
        String v;
        int value =1;
        String hol=Integer.toString(value);
        String out1= "Source";
        String outfile = out1 + hol ;
        String outfile1= outfile;
        fileNames.add(outfile1);
        File Infile = new File (Path);
        //Scanner Input;
        //PrintWriter output;
       // PrintWriter output1;
 try{
        Scanner Input = new Scanner(Infile);
        PrintWriter output = new PrintWriter(outfile1+ ".txt");
        PrintWriter output1= new PrintWriter("Filenames.txt");
         //System.out.println(outfile1);
        //output1.println(outfile1);



        while (Input.hasNext())
        {

            Inputvalue = Input.next();


            v = Inputvalue.substring(0, 1);
            if(v.equals("6"))
            {
                continue;
            }
            //System.out.println(v);
            if(v .equals("*"))
            {
                output.close();
                // Inputvalue = Input.next();
               // output.clear();
                value++;
                hol = Integer.toString(value);
                outfile = out1 + hol;
                outfile1 = outfile;
                //System.out.println(outfile1);
                fileNames.add(outfile1);
                //System.out.println(outfile1);
                output = new PrintWriter(outfile + ".txt");

               // output.println(Inputvalue);
            }
 else
        // if(!Inputvalue.equals(" "))
           output.println(Inputvalue);
           //output1.println(outfile1);
            }
         int length = fileNames.size();
         fileNames.remove(length-1);
 for (Object value1: fileNames)
 {
    output1.println(value1);
 }
        Input.close();
        output1.close();
        output.close();

         }
        catch(FileNotFoundException ex)
        {
            System.out.println("AFS raw data file not found");

        }

        }//Filesorter ends here

    public static double MeanFunc(double[] Arr, int q){
    double LocalMean;
	double Sum;
	Sum=0;

	for(int h=0; h<q; h++)
	{
       Sum= Sum + Arr[h];
	}

	LocalMean= Sum/q;


	return LocalMean;
}

public static double StandardDevFunc(double Arr[], int q){
	double StanDev;

	double Variance;

	double SumSquared;

	double LocalMean;

	double Sum;

	LocalMean=0;

	SumSquared=0;

	Sum=0;

	for(int h=0; h<q; h++)
	{
       Sum= Sum + Arr[h];
	}

	LocalMean= Sum/q;
	double LocalMeanSqr;
	LocalMeanSqr= Math.pow(LocalMean,2);

	for (int r=0; r<q; r++)
	{
      SumSquared=SumSquared +Math. pow(Arr[r],2);
	}

	Variance=(SumSquared-(q*LocalMeanSqr))/(q-1.0);

	StanDev=Math.sqrt(Variance);

	return StanDev;
}
public static int Convert(Seed obj)
    {
    int Hold=0;
    int size;
    String index1;
    String index2;
    index1 = obj.GetNext();
    size = index1.length();
    index2=index1.substring(2);
    Hold = Integer.parseInt(index2);
    return Hold;
    }
}
